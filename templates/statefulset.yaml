apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "mysql.name" . }}
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "mysql.labels" . | nindent 4 }}
spec:
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        {{- include "mysql.labels" . | nindent 8 }}
    spec:
      {{- with .Values.persistence.accessModes }}
      accessModes:
      {{- toYaml . | nindent 6 }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.persistence.size }}
      storageClassName: {{ default "" .Values.persistence.storageClassName | quote }}
      volumeMode: Filesystem
  podManagementPolicy: OrderedReady
  {{- if eq $.Values.architecture "group-replication" }}
  replicas: 3
  {{- else if eq $.Values.architecture "standalone" }}
  replicas: 1
  {{- end }}
  selector:
    matchLabels:
      {{- include "mysql.selectorLabels" . | nindent 6 }}
  updateStrategy:
    type: RollingUpdate
  serviceName: {{ include "mysql.name" . }}
  template:
    metadata:
      labels:
        {{- include "mysql.selectorLabels" . | nindent 8 }}
    spec:
      {{- include "mysql.imagePullSecrets" . | nindent 8 }}
      initContainers:
      - name: init-container
        image: {{ include "mysql.image" . }}
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        command:
        - /bin/bash
        - -c
        - /opt/run_service.sh
        - service
        - init
        envFrom:
        - secretRef:
            name: {{ include "mysql.name" . }}
        env:
        - name: DATA_PATH
          value: /mysql
        - name: CONFIG_PATH
          value: /config
        - name: ARCH_MODE
          value: {{ .Values.architecture }}
        volumeMounts:
        - mountPath: /mysql
          name: data
        - mountPath: /config
          name: config
        - mountPath: /opt
          name: script
        resources: 
          {{- toYaml .Values.resources | nindent 12 }}
      containers:
      - command:
        - /bin/bash
        - -c
        - /opt/run_service.sh
        - service
        - start
        lifecycle:
          postStart:
            exec:
              command:
              - /bin/bash
              - -c
              - /opt/run_service.sh
              - replication
              - init
        image: {{ include "mysql.image" . }}
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        name: mysql
        envFrom:
          - secretRef:
              name: {{ include "mysql.name" . }}
        ports:
        - containerPort: {{ .Values.service.ports.mysql }}
          name: mysql
          protocol: TCP
        {{- if eq .Values.architecture "group-replication" }}
        - containerPort: {{ .Values.service.ports.group }}
          name: group
          protocol: TCP
        {{- end }}
        {{- if .Values.livenessProbe.enabled }}
        livenessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.livenessProbe "enabled") "context" $) | nindent 10 }}
          exec:
            command:
            - /bin/bash
            - c
            - /opt/run_service.sh
            - service
            - status
        {{- end}}
        {{- if .Values.readinessProbe.enabled }}
        readinessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.readinessProbe "enabled") "context" $) | nindent 10 }}
          exec:
            command:
            - /bin/bash
            - -c
            - /opt/run_service.sh
            - service
            - status
        {{- end}}
        {{- if .Values.startupProbe.enabled }}
        startupProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.startupProbe "enabled") "context" $) | nindent 10 }}
          exec:
            command:
            - /bin/bash
            - -c
            - /opt/run_service.sh
            - service
            - status
        {{- end}}
        env:
        - name: DATA_PATH
          value: /mysql
        - name: CONFIG_PATH
          value: /config
        - name: ARCH_MODE
          value: {{ .Values.architecture }}
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: {{ include "mysql.name" . }}
              key: MYSQL_USER
        - name: MYSQL_PASS
          valueFrom:
            secretKeyRef:
              name: {{ include "mysql.name" . }}
              key: MYSQL_PASS
        volumeMounts:
        - mountPath: /mysql
          name: data
        - mountPath: /config
          name: config
        - mountPath: /opt
          name: script
        resources: 
          {{- toYaml .Values.resources | nindent 12 }}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          name: {{ include "mysql.name" . }}-config
        name: config
      - configMap:
          name: {{ include "mysql.name" . }}-script
        name: script

        {{- if .Values.primary.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.primary.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.primary.podAffinityPreset "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.primary.podAntiAffinityPreset "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.primary.nodeAffinityPreset.type "key" .Values.primary.nodeAffinityPreset.key "values" .Values.primary.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}

      {{- if .Values.primary.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.primary.tolerations "context" $) | nindent 8 }}
      {{- end }}