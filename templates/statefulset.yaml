{{- if $.Values.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "mysql.name" . }}
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "mysql.labels" . | nindent 4 }}
spec:
  volumeClaimTemplates:
  - metadata:
      name: {{ template "mysql.name" . }}-data
      labels:
        {{- include "mysql.labels" . | nindent 8 }}
    spec:
      {{- with .Values.persistence.accessModes }}
      accessModes:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.persistence.size }}
      storageClassName: {{ .Values.persistence.storageClassName }}
      volumeMode: Filesystem
  podManagementPolicy: OrderedReady
  {{- if eq $.Values.architecture "group-replication" }}
  replicas: 3
  {{- else if eq $.Values.architecture "standalone" }}
  replicas: 1
  {{- end }}
  selector:
    matchLabels:
      {{- include "mysql.selectorLabels" . | nindent 6 }}
  updateStrategy:
    type: RollingUpdate
  serviceName: {{ include "mysql.name" . }}
  template:
    metadata:
      labels:
        {{- include "mysql.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.image.pullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
      - name: init-container
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command:
        - /bin/bash
        - /opt/mysql_manage.sh
        - service
        - init
        envFrom:
          - secretRef:
              name: {{ .Values.global.mysql.secretName }}
          - secretRef:
              name: {{ include "mysql.name" . }}-auth
        env:
        - name: DATA_PATH
          value: /mysql
        - name: CONFIG_PATH
          value: /config
        - name: ARCH_MODE
          value: {{ .Values.architecture }}
        volumeMounts:
        - mountPath: /mysql
          name: {{ template "mysql.name" . }}-data
        - mountPath: /config
          name: config
        - mountPath: /opt
          name: script
        resources:
          {{- toYaml .Values.init.resources | nindent 12 }}
      containers:
      - command:
        - /bin/bash
        - /opt/mysql_manage.sh
        - service
        - start
        lifecycle:
          postStart:
            exec:
              command:
              - /bin/bash
              - /opt/mysql_manage.sh
              - replication
              - init
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        name: mysql
        envFrom:
          - secretRef:
              name: {{ include "mysql.name" . }}-auth
        ports:
        - containerPort: {{ $.Values.service.internalPort }}
          name: mysql
          protocol: TCP
        {{- if eq $.Values.architecture "group-replication" }}
        - containerPort: 33061
          name: mgr
          protocol: TCP
        {{- end }}
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - /opt/mysql_manage.sh
            - service
            - status
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - /opt/mysql_manage.sh
            - service
            - status
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        env:
        - name: DATA_PATH
          value: /mysql
        - name: CONFIG_PATH
          value: /config
        - name: ARCH_MODE
          value: {{ .Values.architecture }}
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Values.global.mysql.secretName }}
              key: MYSQL_USER
        - name: MYSQL_PASS
          valueFrom:
            secretKeyRef:
              name: {{ .Values.global.mysql.secretName }}
              key: MYSQL_PASS
        volumeMounts:
        - mountPath: /mysql
          name: {{ template "mysql.name" . }}-data
        - mountPath: /config
          name: config
        - mountPath: /opt
          name: script
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          name: {{ include "mysql.name" . }}-config
        name: config
      - configMap:
          name: {{ include "mysql.name" . }}-script
        name: script
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  {{- include "mysql.selectorLabels" . | nindent 18 }}
              topologyKey: kubernetes.io/hostname
        {{- with .Values.nodeAffinity }}
        nodeAffinity:
          {{- toYaml . | nindent 10 }}
        {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
        {{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
{{- end }}
